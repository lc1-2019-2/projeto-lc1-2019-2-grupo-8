(|radix_sort|
 (|radixsort_permutes| 0
  (|radixsort_permutes-2| "no" 3782059132
   ("" (SKEEP)
    (("" (EXPAND "radixsort")
      (("" (LEMMA "merge_sort_is_permutation[T, <<]")
        (("" (INST?)
          (("" (EXPAND "permutations")
            (("" (LEMMA "merge_sort_is_permutation[T, <=]")
              (("" (EXPAND "permutations" -1)
                (("" (INST?)
                  (("" (SKEEP)
                    (("" (INST?)
                      (("" (INST?)
                        (("" (REPLACE -1 -2) (("" (PROPAX) NIL NIL)) NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((|merge_sort_is_permutation| FORMULA-DECL NIL |mergesort| NIL)
    (T FORMAL-TYPE-DECL NIL |radix_sort| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (PRED TYPE-EQ-DECL NIL |defined_types| NIL)
    (|total_preorder?| CONST-DECL "bool" |total_preorder| NIL)
    (<< FORMAL-CONST-DECL "(total_preorder?[T])" |radix_sort| NIL)
    (|list| TYPE-DECL NIL |list_adt| NIL)
    (<= FORMAL-CONST-DECL "(total_preorder?[T])" |radix_sort| NIL)
    (|merge_sort| DEF-DECL "list[T]" |mergesort| NIL)
    (|permutations| CONST-DECL "bool" |sorting_aux| NIL)
    (|radixsort| CONST-DECL "list[T]" |radix_sort| NIL))
   SHOSTAK)
  (|radixsort_permutes-1| NIL 3780674051
   ("" (SKEEP)
    (("" (EXPAND "radixsort")
      (("" (LEMMA "merge_sort_is_permutation[T, <<]")
        (("" (INST -1 "merge_sort[T, <=](l)")
          (("" (EXPAND "permutations")
            (("" (LEMMA "merge_sort_is_permutation[T, <=]")
              (("" (EXPAND "permutations")
                (("" (INST -1 "l")
                  (("" (SKEEP)
                    (("" (INST?)
                      (("" (INST?)
                        (("" (REPLACE -1 -2) (("" (PROPAX) NIL NIL)) NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((|radixsort| CONST-DECL "list[T]" |radix_sort| NIL)
    (|list| TYPE-DECL NIL |list_adt| NIL)
    (<= FORMAL-CONST-DECL "(total_preorder?[T])" |radix_sort| NIL)
    (|merge_sort| DEF-DECL "list[T]" |mergesort| NIL)
    (|permutations| CONST-DECL "bool" |sorting_aux| NIL)
    (<< FORMAL-CONST-DECL "(total_preorder?[T])" |radix_sort| NIL)
    (|total_preorder?| CONST-DECL "bool" |total_preorder| NIL)
    (PRED TYPE-EQ-DECL NIL |defined_types| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (T FORMAL-TYPE-DECL NIL |radix_sort| NIL)
    (|merge_sort_is_permutation| FORMULA-DECL NIL |mergesort| NIL))
   SHOSTAK))
 (|radixsort_sorts_TCC1| 0
  (|radixsort_sorts_TCC1-1| NIL 3777655189
   ("" (TYPEPRED "<<" "<=")
    (("" (EXPAND "total_preorder?")
      (("" (EXPAND "preorder?")
        (("" (PROP)
          (("1" (HIDE -2 -3 -5 -6) (("1" (GRIND) NIL NIL)) NIL)
           ("2" (EXPAND "lex")
            (("2" (EXPAND "transitive?" 1)
              (("2" (SKEEP)
                (("2" (SPLIT -1)
                  (("1" (FLATTEN)
                    (("1" (SPLIT -2)
                      (("1" (FLATTEN)
                        (("1" (COPY -4)
                          (("1" (EXPAND "transitive?" -1)
                            (("1" (INST -1 "x_1" "y_1" "z")
                              (("1" (ASSERT)
                                (("1" (EXPAND "transitive?" -6)
                                  (("1" (INST -6 "y_1" "z" "x_1")
                                    (("1" (ASSERT) NIL NIL)) NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL)
                       ("2" (ASSERT)
                        (("2" (FLATTEN)
                          (("2" (COPY -6)
                            (("2" (EXPAND "transitive?" -1)
                              (("2" (INST -1 "x_1" "y_1" "z")
                                (("2" (ASSERT)
                                  (("2" (EXPAND "transitive?" -8)
                                    (("2" (INST -8 "y_1" "z" "x_1")
                                      (("2" (ASSERT) NIL NIL)) NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL)
                   ("2" (SPLIT -2)
                    (("1" (FLATTEN)
                      (("1" (ASSERT)
                        (("1" (COPY -6)
                          (("1" (EXPAND "transitive?" -1)
                            (("1" (INST -1 "x_1" "y_1" "z")
                              (("1" (ASSERT)
                                (("1" (EXPAND "transitive?" -8)
                                  (("1" (INST -8 "z" "x_1" "y_1")
                                    (("1" (ASSERT) NIL NIL)) NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL)
                     ("2" (FLATTEN)
                      (("2" (COPY -8)
                        (("2" (EXPAND "transitive?" -1)
                          (("2" (INST -1 "x_1" "y_1" "z")
                            (("2" (ASSERT)
                              (("2" (EXPAND "transitive?" -13)
                                (("2" (INST -13 "x_1" "y_1" "z")
                                  (("2" (ASSERT) NIL NIL)) NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL)
           ("3" (EXPAND "lex")
            (("3" (EXPAND "dichotomous?" 1)
              (("3" (SKEEP)
                (("3" (HIDE -2 -5)
                  (("3" (COPY -2)
                    (("3" (COPY -5)
                      (("3" (EXPAND "dichotomous?" -2)
                        (("3" (INST?)
                          (("3" (PROP)
                            (("1" (EXPAND "dichotomous?" -4)
                              (("1" (INST?) (("1" (ASSERT) NIL NIL)) NIL)) NIL)
                             ("2" (EXPAND "dichotomous?" -4)
                              (("2" (INST?) (("2" (ASSERT) NIL NIL)) NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   NIL NIL))
 (|radixsort_sorts| 0
  (|radixsort_sorts-1| NIL 3782056388
   ("" (EXPAND "radixsort")
    (("" (SKEEP)
      (("" (LEMMA "merge_sort_is_sorted[T,<<]")
        (("" (LEMMA "is_sorted_implies_monotone[T,<<]")
          (("" (INST -2 "merge_sort[T,<=](l)")
            (("" (INST -1 "merge_sort[T,<<](merge_sort[T,<=](l))")
              (("" (PROP)
                (("" (HIDE -2)
                  (("" (EXPAND "is_sorted?")
                    (("" (SKEEP)
                      (("" (INST -1 "1 + k" "_")
                        (("" (EXPAND "lex")
                          (("" (INST?)
                            (("" (FLATTEN) (("" (POSTPONE) NIL NIL)) NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   NIL SHOSTAK)))

